plugins {
  id "org.sonarqube" version "3.3"
}

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}

allprojects {
  group 'de.d3adspace.project'
  version '1.0-SNAPSHOT'

  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'jacoco'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'

  sourceCompatibility = 1.13
  targetCompatibility = 1.13

  repositories {
    google()
    mavenLocal()
    mavenCentral()
  }

  dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api',
      version: '5.5.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params',
      version: '5.5.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine',
      version: '5.5.2'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-engine',
      version: '1.5.2'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter',
      version: '3.1.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.0'
  }

  test {
    useJUnitPlatform()
  }

  publishing {
    repositories {
      maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/d3adspace/gradle-project-template")
        credentials {
          username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_PACKAGE_REGISTRY_USER")
          password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGE_REGISTRY_API_KEY")
        }
      }
      maven {
        def releasesRepoUrl = 'https://repository.klauke-enterprises.com/repository/maven-releases/'
        def snapshotsRepoUrl = 'https://repository.klauke-enterprises.com/repository/maven-snapshots/'
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = System.getenv('NEXUS_USERNAME')
          password = System.getenv('NEXUS_PASSWORD')
        }
      }
    }
    publications {
      gpr(MavenPublication) {
        from(components.java)
      }
    }
  }
}

task codeCoverageReport(type: JacocoReport) {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled = true
    html.enabled = true
    csv.enabled = true
    xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
    html.destination = new File("${buildDir}/reports/jacoco/report.html")
    csv.destination = new File("${buildDir}/reports/jacoco/report.csv")
  }
}

sonarqube {
  properties {
    property "sonar.projectKey", "d3adspace_gradle-project-template"
  }
}